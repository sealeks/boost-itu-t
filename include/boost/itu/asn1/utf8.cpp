// Copyright 2006 Nemanja Trifunovic

/*
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
 */



#include <boost/itu/asn1/utf8.hpp>
#include <vector>
#include <algorithm>
#include <iostream>
#include <iterator>


#if defined(__MINGW32__) && defined(_amd64_)
#define ASNUTF8_DEF_WCHAR16
#elif defined(__MINGW32__)
#define ASNUTF8_DEF_WCHAR16
#elif defined(_MSC_VER) && defined(_WIN64)
#define ASNUTF8_DEF_WCHAR16
#elif defined(_MSC_VER) 
#define ASNUTF8_DEF_WCHAR16 
#elif defined(__GNUC__) && defined(__amd64__)
#define ASNUTF8_DEF_WCHAR32
#elif defined(__GNUC__)
#define ASNUTF8_DEF_WCHAR32 
#else
#error PlatformXCompiler spec dont defined
#endif





namespace boost {
    namespace asn1 {

        using namespace boost::asn1::utf8;
        using namespace std;

        bool check_utf8(const std::string& val) {
            try {
                return boost::asn1::utf8::is_valid(val.begin(), val.end());
            }            catch (...) {
            }
            return false;
        }

        std::wstring utf8_to_wstr(const std::string& val) {
            try {
                string::const_iterator end_it = boost::asn1::utf8::find_invalid(val.begin(), val.end());
                if (end_it != val.end()) {
                    return L"?-noUTF8";
                }
                std::size_t length = boost::asn1::utf8::distance(val.begin(), end_it);
                std::vector<wchar_t> unicodeline;
                if (length)
                    unicodeline.reserve(length);
                else
                    return L"";
#if defined(ASNUTF8_DEF_WCHAR16)
                boost::asn1::utf8::utf8to16(val.begin(), end_it, std::back_inserter(unicodeline));
#elif defined(ASNUTF8_DEF_WCHAR32)
                boost::asn1::utf8::utf8to32(val.begin(), end_it, std::back_inserter(unicodeline));
#else    
                return L"?";
#endif        
                return std::wstring(unicodeline.begin(), unicodeline.end());
            }            catch (...) {
            }
            return L"";
        }

        bool utf8_to_wstr(const std::string& val, std::wstring& rslt) {
            try {
                string::const_iterator end_it = boost::asn1::utf8::find_invalid(val.begin(), val.end());
                if (end_it != val.end()) {
                    return false;
                }
                std::size_t length = boost::asn1::utf8::distance(val.begin(), end_it);
                std::vector<wchar_t> unicodeline;
                if (length)
                    unicodeline.reserve(length);
                else
                    return L"";
#if defined(ASNUTF8_DEF_WCHAR16)
                boost::asn1::utf8::utf8to16(val.begin(), end_it, std::back_inserter(unicodeline));
#elif defined(ASNUTF8_DEF_WCHAR32)
                boost::asn1::utf8::utf8to32(val.begin(), end_it, std::back_inserter(unicodeline));
#else    
                return false;
#endif        
                rslt = std::wstring(unicodeline.begin(), unicodeline.end());
                return true;
            }            catch (...) {
            }
            return false;
        }

        std::string wstr_to_utf8(const std::wstring& val) {
            try {
                std::string utf8line;
#if defined(ASNUTF8_DEF_WCHAR16)      
                boost::asn1::utf8::utf16to8(val.begin(), val.end(), std::back_inserter(utf8line));
#elif defined(ASNUTF8_DEF_WCHAR32) 
                boost::asn1::utf8::utf32to8(val.begin(), val.end(), std::back_inserter(utf8line));
#else    
                return L"?";
#endif        
                return utf8line;
            }            catch (...) {
            }
            return "";
        }

        bool wstr_to_utf8(const std::wstring& val, std::string& rslt) {
            try {
                std::string utf8line;
#if defined(ASNUTF8_DEF_WCHAR16)      
                boost::asn1::utf8::utf16to8(val.begin(), val.end(), std::back_inserter(utf8line));
#elif defined(ASNUTF8_DEF_WCHAR32)
                boost::asn1::utf8::utf32to8(val.begin(), val.end(), std::back_inserter(utf8line));
#else    
                return L"?";
#endif        
                rslt = utf8line;
                return true;
            }            catch (...) {
            }
            return false;
        }

        bool wstr_to_universalstr(const std::wstring& val, std::string& rslt) {
            try {

#if defined(ASNUTF8_DEF_WCHAR16)    
                std::string utf8line;
                boost::asn1::utf8::utf16to8(val.begin(), val.end(), std::back_inserter(utf8line));
                std::vector<boost::asn1::utf8::uint32_t> utf32line;
                boost::asn1::utf8::utf8to32(utf8line.begin(), utf8line.end(), std::back_inserter(utf32line));
                for (std::vector<boost::asn1::utf8::uint32_t>::const_iterator it = utf32line.begin(); it != utf32line.end(); ++it) {
                    std::copy(reinterpret_cast<const std::string::value_type*> (&(*it)), reinterpret_cast<const std::string::value_type*> (&(*it)) + 4, std::back_inserter(rslt));
#ifndef BIG_ENDIAN_ARCHITECTURE                        
                    std::reverse(rslt.end() - 4, rslt.end());
#endif                        
                }
#elif defined(ASNUTF8_DEF_WCHAR32)
                for (std::wstring::const_iterator it = val.begin(); it != val.end(); ++it) {
                    std::copy(reinterpret_cast<const std::string::value_type*> (&(*it)), reinterpret_cast<const std::string::value_type*> (&(*it)) + 4, std::back_inserter(rslt));
#ifndef BIG_ENDIAN_ARCHITECTURE                         
                    std::reverse(rslt.end() - 4, rslt.end());
#endif                            
                }
#else    
                return L"?";
#endif        
                return true;
            }            catch (...) {
            }
            return false;
        }

        bool wstr_to_bmpstr(const std::wstring& val, std::string& rslt) {
            try {

#if defined(ASNUTF8_DEF_WCHAR16)    
                for (std::wstring::const_iterator it = val.begin(); it != val.end(); ++it) {
                    std::copy(reinterpret_cast<const std::string::value_type*> (&(*it)), reinterpret_cast<const std::string::value_type*> (&(*it)) + 2, std::back_inserter(rslt));
#ifndef BIG_ENDIAN_ARCHITECTURE                           
                    std::reverse(rslt.end() - 2, rslt.end());
#endif                                
                }
#elif defined(ASNUTF8_DEF_WCHAR32)
                std::string utf8line;
                boost::asn1::utf8::utf32to8(val.begin(), val.end(), std::back_inserter(utf8line));
                std::vector<boost::asn1::utf8::uint16_t> utf16line;
                boost::asn1::utf8::utf8to16(utf8line.begin(), utf8line.end(), std::back_inserter(utf16line));
                for (std::vector<boost::asn1::utf8::uint16_t>::const_iterator it = utf16line.begin(); it != utf16line.end(); ++it) {
                    std::copy(reinterpret_cast<const std::string::value_type*> (&(*it)), reinterpret_cast<const std::string::value_type*> (&(*it)) + 2, std::back_inserter(rslt));
#ifndef BIG_ENDIAN_ARCHITECTURE                          
                    std::reverse(rslt.end() - 2, rslt.end());
#endif          

                }
#else    
                return L"?";
#endif        
                return true;
            }            catch (...) {
            }
            return false;
        }

        bool universalstr_to_wstr(const std::string& val, std::wstring& rslt) {
            if (val.empty())
                return true;
            if ((val.size() % 4))
                return false;
            try {

#if defined(ASNUTF8_DEF_WCHAR16)    
                std::vector<boost::asn1::utf8::uint32_t> utf32line;
                std::size_t cnt = 0;
                for (std::string::const_iterator it = val.begin(); it != val.end(); ++it) {
                    if (!((cnt++) % 4))
                        utf32line.push_back(0);
                    if (!utf32line.empty())
#ifndef BIG_ENDIAN_ARCHITECTURE                          
                        utf32line.back() |= ((static_cast<boost::asn1::utf8::uint32_t> (static_cast<boost::asn1::utf8::uint8_t> (*it))) << (8 * (4 - (cnt % 4))));
#else
                        utf32line.back() = (utf32line.back() << 8) | (static_cast<boost::asn1::utf8::uint32_t> (static_cast<boost::asn1::utf8::uint8_t> (*it)));
#endif                        
                }
                std::string utf8line;
                boost::asn1::utf8::utf32to8(utf32line.begin(), utf32line.end(), std::back_inserter(utf8line));
                boost::asn1::utf8::utf8to16(utf32line.begin(), utf32line.end(), std::back_inserter(rslt));
#elif defined(ASNUTF8_DEF_WCHAR32)
                std::size_t cnt = 0;
                for (std::string::const_iterator it = val.begin(); it != val.end(); ++it) {
                    if (!((cnt++) % 4))
                        rslt.push_back(0);
                    if (!rslt.empty())
#ifndef BIG_ENDIAN_ARCHITECTURE                               
                        rslt[rslt.size() - 1] |= static_cast<std::wstring::value_type> (static_cast<boost::asn1::utf8::uint8_t> (*it)) << (8 * (4 - (cnt % 4)));
                    ;
#else
                        rslt[rslt.size() - 1] = (rslt[rslt.size() - 1] << 8) | static_cast<std::wstring::value_type> (static_cast<boost::asn1::utf8::uint8_t> (*it));
#endif                              
                }
#else    
                return L"?";
#endif        
                return true;
            }            catch (...) {
            }
            return false;
        }

        bool bmpstr_to_wstr(const std::string& val, std::wstring& rslt) {
            if (val.empty())
                return true;
            if ((val.size() % 2))
                return false;
            try {

#if defined(ASNUTF8_DEF_WCHAR16)    
                std::size_t cnt = 0;
                for (std::string::const_iterator it = val.begin(); it != val.end(); ++it) {
                    if (!((cnt++) % 2))
                        rslt.push_back(0);
                    if (!rslt.empty())
#ifndef BIG_ENDIAN_ARCHITECTURE                            
                        rslt[rslt.size() - 1] |= (static_cast<std::wstring::value_type> (static_cast<boost::asn1::utf8::uint8_t> (*it)) << (8 * (cnt % 2)));
#else
                        rslt[rslt.size() - 1] = (rslt[rslt.size() - 1] << 8) | (static_cast<std::wstring::value_type> (static_cast<boost::asn1::utf8::uint8_t> (*it)));
#endif                         
                }
#elif defined(ASNUTF8_DEF_WCHAR32)
                std::size_t cnt = 0;
                std::vector<boost::asn1::utf8::uint16_t> utf16line;
                for (std::string::const_iterator it = val.begin(); it != val.end(); ++it) {
                    if (!((cnt++) % 2))
                        utf16line.push_back(0);
                    if (!utf16line.empty())
#ifndef BIG_ENDIAN_ARCHITECTURE                                    
                        utf16line[utf16line.size() - 1] |= static_cast<boost::asn1::utf8::uint16_t> (static_cast<boost::asn1::utf8::uint8_t> (*it)) << (8 * (cnt % 2));
                    ;
#else
                        utf16line[utf16line.size() - 1] = (utf16line[utf16line.size() - 1] << 8) | (static_cast<boost::asn1::utf8::uint16_t> (static_cast<boost::asn1::utf8::uint8_t> (*it)));
#endif             
                }
                std::vector<boost::asn1::utf8::uint8_t> utf8line;
                boost::asn1::utf16to8(utf16line.begin(), utf16line.end(), std::back_inserter(utf8line));
                boost::asn1::utf8to32(utf8line.begin(), utf8line.end(), std::back_inserter(rslt));


#else    
                return L"?";
#endif        
                return true;
            }            catch (...) {
            }
            return false;
        }

        bool quadrople_to_str(const boost::asn1::utf8::uint32_t& val, std::string& rslt) {
            try {
                std::vector<boost::asn1::utf8::uint32_t> utf32line(1, val);
                boost::asn1::utf8::utf32to8(utf32line.begin(), utf32line.end(), std::back_inserter(rslt));
            } catch (...) {
                return false;
            }
            return true;
        }

    }
}

